# git  

1、安装下载git。  
    （1）Linux 安装方法：sudo apt-get install git  
    （2）Mac OS X安装方法：  
        I、下载homebrew，后通过homebre下载。  
        II、下载Apple开发工具Xcode，集成git。通过终端输入git，根据提示更新，下载开发者命令行工具。  
     (3)Windows安装方法：下载exe文件。  
2、全局配置（仓库用户名及邮件地址）。  
     git config --global user.name “yourname”  
     git config --global user.email "youremail address"  
     执行完成后，将在~目录下生成一个隐藏文件.gitconfig,  
     [user]  
         name = yourname  
         email = youremail address  
3、仓库初始化。  
    将本地需管理的目录纳入git管理。定位需要管理的文件目录后，输入：git init  
    将在本地目录中，生成git管理需要的.git目录，进行版本管理，目录中的文件勿轻易删除。  
4、git分布式版本管理原理。  
    git分布式版本控制对修改进行管理。修改的转移从“工作区” ==》 “暂存区” ==》版本入库（本地）==》 版本入库（版本服务器（内网或githu.com）。  
    因此，git的版本管理分为本地管理和远程管理两类。主要的管理工作在本地进行。  
   （1）本地版本控制（基本操作）。  
    I、工作区编辑文件。  
       vi filename、mkdir 目录名。  
    II、发送文件或目录到暂存区。（本质为当前工作区的修改：新增、更新）  
       git add * 或 git filename  
    III、提交文件到版本库   
       git commit -m “说明“  
    IV、检查当前状态。  
       git status  
    V、显示版本库入库记录。  
       git log  
    VI、显示操作记录。  
       git reflog  
    VII、工作区修改撤销。  
       git checkout -- filename（省略--为切换分支命令）  
       -- 实则为缓存区标识  
       若暂存区无内容，则回到版本库的状态。若存在暂存区，则撤销到和暂存区一样的状态。  
       若改乱了当前工作区的内容，且已经提交到了暂存区。则首先需将暂存区文件回退到当前版本库状态：  
       git reset HEAD filename  
       然后回退该文件。  
       git checkout -- filename  
    VIII、版本回退  
       git reset --hard 提交ID  
       其中提交ID通过git log 或者 git reflog显示提交的ID，只需输入前面几位即可。git会自动协助寻找对应的版本。或HEAD^标识上一版本，HEAD^^标识上上版本,HEAD~100标识上100个版本。  
    IX、版本库文件删除  
       git rm filename  
       git commit -m "说明"  
       则本地文件filename也在本地删除。  
       如后悔了，不准备从版本库删除，则从当前版本库回退到暂存区：  
       git reset HEAD filename  
       然后从暂存区回退到工作区：  
       git checkout -- filename  
       HEAD 实则为指向当前分支。  
    X、标签管理  
       （1）新建标签。  
            在提交版本上新建标签。  
            git tag 标签名 或 git tag -a 标签名 -m ”标签说明“ 提交id。  
        (2)显示标签  
            git tag 或 git show 标签名  
        (3)删除标签  
            git tag -d 标签名  
    XI、分支管理  
        初始化版本库，默认新建一个提交分支master。  
        （1）创建分支  
            git checkout -b 分支名称  
        （2）切换分支  
            git checkout 分支名称  
        （3）删除分支  
            git branch -d 分支名称  
        （4）显示当前工作区分支情况  
            git branch  
        （5）字符型图形显示分支情况  
            git log --graph  
            简化显示如下：  
            git log --graph --pretty=oneline --abbrev-commit  
        （6）合并分支  
            分支存在意义为尽量不影响主分支的提交内容。在分支上操作后，确认可提交内容，可进行分支内容合并。  
            git merge 要和master分支合并的分支名称  
            此时的合并为Fast-Forward，快速合并。并不会保存合并操作的记录。  
            若需要保存合并提交记录，可使用如下：  
            git merge --no-ff -m "说明" 分支名称   
            合并分支会存在提交冲突情况，则合并不会自动生成，会合并的内容生成形成差异合集，人工进行核实，解决冲突后，再次提交。  
        （7）分支保存  
            当前分支正进行功能开发，尚不能提交，而需要紧急修复其他bug的时候，可将分支放进暂存，进行现场保护。  
            1、保存当前分支现场  
                git stash  
            2、显示暂存分支情况  
                git stash list  
            3、恢复最近一次暂存分支  
                git stash pop  
            4、恢复指定暂存分支  
                git stash apply 暂存id（如：stash@{0}）  
                git stash drop 或 git stash drop 暂存ID  
            5、强制删除分支  
                git branch -D 分支名称  
            6、整理分支  
                git rebase  
                含义为：当团队协作时，分支提交分叉较多时候，为了保持分支历史的美观，rebase会自动变更基线，使得提交记录直线话，但就实际改变了实际的操作记录。  
        （8）配置git操作别名。  
            git config --global alias.别名 待简化的操作，如：  
            git config --global alias.co checkout  
            git config --global alias.lg "log --graph --pretty=oneline --abbrev-commit"  
            --global的作用为对当前用户的范围，而不加则为对当前版本库的范围。  
            内容分别被写入如下配置文件：  
            --global：~/.gitconfig  
            不加：./.git/config  
        （9）设置忽略文件清单  
            在版本库当前目录新建并将需要忽略的文件写入.gitignore，提交.gitignore到版本库。  
            .gitignore文件内容可参考如下（官方有针对各种忽略文件的模板可下载使用）：  
            # c  
            .o  
            .~obj  
    （2）远程版本控制（协作操作）。  
     I、通过GitHub远程同步管理  
         1、GitHub远程同步。  
            1）传输配置。  
                因本地git与远程GitHub是通过ssh加密传输，故需要做如下设置。  
                检查主目录是否存在.ssh的目录及是否存在id_rsa和id_rsa.pub文件，如没有，这通过如下命令生成：  
                ssh_keygen -t rsa -C "youremailaddress".  
                将生产的id_rsa.pub文件的内容拷贝到github的设置中：  
                Settings-SSH and GPG keys-SSH keys。  
            2）将本地git版本库同步到远程仓库  
                首先，在github上新建一个repository.明明为本地文件夹相同。  
                其次，可根据提示同步，在本地建立远程关联如：git remote add origin https://github.com/yourname/yourgit.git  
                最后，将本地版本库推送到远程：git push -u origin master。后续每次可通过：git push origin master推送。其中master推动分支，也可以推动其他分支。  
            3)克隆版本库。 
                git clone git@github.com:yourname/yourrepository.git  
                注意采用https:有两个问题，一是需要输入密码，二是传输慢。而采用ssh则不会。  
            4）推送标签  
                一次性全部推送：git push origin --tags  
                一次推送一个：git push origin 标签名  
                删除标签：git push origin :refs/tags/标签名  
            5）多人协作，其他分支关联  
                克隆并不会把其他分支也同步，需要手工关联：  
                首先，创建本地分支于远程分支的对应关系：git checkout -b dev origin/dev  
                再次，建立本地和远程的关联：git branch --set-upstream-to=origin/dev dev  
                最后，获取远程最新版本,会提示需要合并与否：git pull  
            6)设置多远程库  
                删除远程库：git remote rm origin  
                设置不同的远程库：  
                git remote add github或别的名字 git@github.com:yourname/yourrepository.git  
                git remote add gitee或别的名字 git@gitee.com:yourname/yourrepository.git  

5、搭建git服务器(高级主题)  
    在macos上四步创建git服务器。  
    (1)安装git  
    (2)创建运行git服务的用户，如git，也可以创建其他用户。  
    (3)创建证书登录  
        收集所有需要登录的用户的公钥id_rsa.pub文件，把所有公钥导入到：创建的git用户目录/.ssh/authorized_keys文件里，一行一个。  
    (4)初始化仓库  
        在需要作为服务器目录的位置，执行：  
        git init --bare sample.git  
    (5)设置仓库属主为新建的git用户
        sudo chown -R git:git sample.git
    (6)设置禁用ssh登录。
    (7)连接自定义git服务器仓库。
        git remote add 本地名称 git@localhost:创建版本库的目录/sample.git    
6、自建git服务器管理工具。  
    (1)公钥管理。Gitosis  
    (2)权限管理。Gitolite  
7、推荐网站。  
    github.com  
    git-scm.com  
